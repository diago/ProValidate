h1. Provalidate

Validation blows. It blows even harder when you have just finished server side validation and then move on to
client side validation. The focus of ProValidate is to be able to use the rules and error messages you
create on the server side as painlessly as possible on the client side. It will take some work in your current
form validation library to get it all together, but trust me... it's worth it.

On the server side rules are added to form elements that will be validated when the form is submitted. Just have those
rules create a pipe separated string added to the class of an element and ProValidate will roll through them and generate 
the client side validation. 

An example class:
<pre><code class="php">
    validate_rquired|length[1,15]|alpha_numeric
</code></pre>

Rules are comprised of rule[params] or just rule.

In full:
<pre><code class="php">
    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; class=&quot;input validate_rquired|length[1,15]|alpha_numeric&quot; value=&quot;&quot; /&gt;
</code></pre>

Of course you can use ProValidate as a standard JS validation library by manual adding the class above or:
<pre><code class="javascript">
    var provalidate = new ProValidate('myForm');
    provalidate.add('username').rule('required', 'Required Message').rule('alpha_numeric');
    
    // OR
    
    var usernameRules = {
        required: 'This field is required',
        alpha_numeric: false // will use the canned message
    }
    provalidate.addRules('username', rules);
    
    // OR
    
    provalidate.addRule('username', 'required', 'Required Message');
</code></pre>