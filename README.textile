h1. ProValidate

A validation class using the Prototype Javascript Library.

h2. Examples

You can add rules several different ways depending on your needs. When adding elements to rules you can use either the id or the 
name of the form element.

Rules added manually:
<pre><code class="javascript">
<script type="text/javascript" src="/js/prototype/prototype.js"></script>
<script type="text/javascript" src="/js/provalidate/provalidate.js"></script>
<script>
document.observe('dom:loaded', function(){
    var provalidate = new ProValidate('infoForm');
    var usernameRules = {
    	'required': false, // uses the default required message
    	'length[1,10]': 'Must be between 1 and 10 chars',
    	'alpha_numeric': false
    };
    provalidate.addRules('username', usernameRules);
    
    provalidate.add('phone').rule('required').rule('phone', 'Please enter a valid phone number');
    
    provalidate.addRule('email', 'email', 'Must be a valid email address');
});
</script>
</code></pre>

I have my backend system generate element storage which is another option for adding rules and messages:

<pre><code class="javascript">
document.observe('dom:loaded', function(){
	$('login_date').store('provalidate',{'date':'Date must be mm/dd/yyyy'});
	$('login_alpha').store('provalidate',{'alpha':'Must contain only letters'});
	$('login_alpha_numeric').store('provalidate',{'alpha_numeric':'Must contain only letters and numbers.'});
	$('login_numeric').store('provalidate',{'numeric':'Must contain only numbers'});
	$('login_phone').store('provalidate',{'phone':'Invalid phone'});
	$('login_email').store('provalidate',{'email':'Invalid email'});
	$('login_password').store('provalidate',{'required':'Required','matches[password2]':'Must match Password2'});
	$('login_password2').store('provalidate',{'required':'Required','matches[password]':'Must match Password'});
	$('login_state').store('provalidate',{'required':'Required'});
	$('login_web_site').store('provalidate',{'url':'Must be a full web address'});
});
</code></pre>

ProValidate will run through and add the validation rules and messages from the storage.

h2. Built in rules

The built in rules follow the "Kohana":http://www.kohanaphp.org validation conventions.

h3. required

No Parameters - returns false on an empty() value

h3. length

length[5] - Value would have to be exactly 5 chars
length[1,10] - Value would have to be between 1 and 10 chars

h3. alpha

No Parameters - Value must contain only letters

h3. alpha_numeric

No Parameters - Values must contain only letters and numbers

h3. numeric 

No Parameters - Value must contain only numbers

h3. phone

phone[7,10,11] - Value must contain the given amount of numbers found in the parameter. By default
    just using **validate_phone** will return true for 7, 10 and 11 digit phone numbers. If you wanted to
    accept only 10 digit numbers simply use **validate_phone[10]**.
    
h3. email

No Parameters - Value must be a valid user@domain.tld 

h3. date

No Parameter - By default date checks for dd/dd/dddd but you can change the pattern to whatever you like.
    To change the pattern, add **Provalidate.Validation.dateFormat = /regex/** before calling new ProValidate. 
    This may passed in as a parameter soon.

More built in rules to come.

You can add your own rules by creating a rules object and extending ProValidate.Validation:

<pre><code class="javascript">
myRules = {
	not: function(elem, param){
		var value = $F(elem);
		return value.empty() ? true : (value != param);
	}
};

Object.extend(ProValidate.Validation, myRules);
</code></pre>

To add your rule to an element:

<pre><code class="javascript">
	var provalidate = new ProValidate('myForm').add('state').rule('not[VA]', "You can't live in Virginia, you are not a lover.");
</code></pre>

h2. Methods

For most methods **element** refers to either the **id** of an element or the **name** of the element. All methods are chainable except validate which returns boolean. 

|_. Method |_. Use |_. Description |
| add | provalidate.add(element) | Sets an element up for rules to be added with .rule() |
| addRule | provalidate.addRule(element, rule, message) | Adds a rule to the form element. |
| addRules | provalidate.addRules(element, {rule: message, rule2: message}) | Adds multiple rules to an element. |
| clearInvalid | protovalidate.clearInvalid(element) | Clears errors from an element. If no element is given, clears all errors |
| removeRule | provalidate.removeRule(element, rule) | Removes the given rule from an element. |
| rule | provalidate.rule(rule, message) | Adds a rule to an element prepared with .add() |
| storedRules | provaidate.storedRules(element) | Pulls the rules that have been stored in an element with Element#store |
| trigger | provalidate.trigger(element, rule, message) | Triggers an error. Message is optional. Rule is optional if you provide a message. |
| validate | provalidate.validate(element, rule) | Returns bool. Rule can be a string to check a single rule, an object of {rules: messages} to check multiple, or nothing to check all rules currently assigned to the element. |
