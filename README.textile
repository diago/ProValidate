h1. ProValidate

Validation blows. It blows even harder when you have just finished server side validation and then move on to
client side validation. The focus of ProValidate is to be able to use the rules and error messages you
create on the server side as painlessly as possible on the client side. It will take some work in your current
form validation library to get it all together, but trust me... it's worth it.

On the server side rules are added to form elements that will be validated when the form is submitted. Just have those
rules create a pipe separated string added to the class of an element and ProValidate will roll through them and generate 
the client side validation. 

h2. Examples

You can add rules several different ways depending on your needs. When adding elements to rules you can use either the id or the 
name of the form element.

Rules added manually:
<pre><code class="javascript">
<script type="text/javascript" src="/js/prototype/prototype.js"></script>
<script type="text/javascript" src="/js/provalidate/provalidate.js"></script>
<script>
document.observe('dom:loaded', function(){
    var provalidate = new ProValidate('infoForm');
    var usernameRules = {
    	'required': false, // uses the default required message
    	'length[1,10]': 'Must be between 1 and 10 chars',
    	'alpha_numeric': false
    };
    provalidate.addRules('username', usernameRules);
    
    provalidate.add('phone').rule('required').rule('phone', 'Please enter a valid phone number');
    
    provalidate.addRule('email', 'email', 'Must be a valid email address');
});
</script>
</code></pre>

I have my backend system generate element storage which is another option for adding validate:

<pre><code class="javascript">
document.observe('dom:loaded', function(){
	$('login_date').store('provalidate',{'date':'Date must be mm/dd/yyyy'});
	$('login_alpha').store('provalidate',{'alpha':'Must contain only letters'});
	$('login_alpha_numeric').store('provalidate',{'alpha_numeric':'Must contain only letters and numbers.'});
	$('login_numeric').store('provalidate',{'numeric':'Must contain only numbers'});
	$('login_phone').store('provalidate',{'phone':'Invalid phone'});
	$('login_email').store('provalidate',{'email':'Invalid email'});
	$('login_password').store('provalidate',{'required':'Required','matches[password2]':'Must match Password2'});
	$('login_password2').store('provalidate',{'required':'Required','matches[password]':'Must match Password'});
	$('login_state').store('provalidate',{'required':'Required'});
	$('login_web_site').store('provalidate',{'url':'Must be a full web address'});
});
</code></pre>

ProValidate will run through and add the validation rules and messages from the storage.

h2. Built in rules

The built in rules follow the "Kohana":http://www.kohanaphp.org validation conventions.

h3. required

No Parameters - returns false on an empty() value

h3. length

length[5] - Value would have to be exactly 5 chars
length[1,10] - Value would have to be between 1 and 10 chars

h3. alpha

No Parameters - Value must contain only letters

h3. alpha_numeric

No Parameters - Values must contain only letters and numbers

h3. numeric 

No Parameters - Value must contain only numbers

h3. phone

phone[7,10,11] - Value must contain the given amount of numbers found in the parameter. By default
    just using **validate_phone** will return true for 7, 10 and 11 digit phone numbers. If you wanted to
    accept only 10 digit numbers simply use **validate_phone[10]**.
    
h3. email

No Parameters - Value must be a valid user@domain.tld 

h3. date

No Parameter - By default date checks for dd/dd/dddd but you can change the pattern to whatever you like.
    To change the pattern to adjust the **Provalidate.Validation.dateFormat**. This will passed in as a 
    parameter soon.

More rules to come
