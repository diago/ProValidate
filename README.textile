h1. ProValidate has had a make over!

Please give me some time to rewrite the docs.


h1. ProValidate

A validation class using the Prototype Javascript Library.

ProValidate attaches methods to form elements like all native Prototype methods.

You can also create your own handlers that will deal with error messages easily. More on that soon.

h2. Examples

<pre><code type="javascript">
$('login_name').rule('required');

$('login_form').observe('form:valid', function(ev){
    this.request();
});
</code></pre>

more coming soon!

**There are more examples on the "demo page":http://dev.outlandweb.com/projects/demos/provalidate**

h2. Built in rules

The built in rules follow the "Kohana":http://www.kohanaphp.org validation conventions.

h3. alpha

No Parameters - Value must contain only letters

h3. alpha_numeric

No Parameters - Values must contain only letters and numbers

h3. date

date[pattern] - By default date checks for dd/dd/dddd but you can change the pattern to whatever you like.
    To change the pattern globally, add **Provalidate.Validation.dateFormat = 'regexPattern'** before calling new ProValidate. 
    You can also pass the pattern in as a param. **You must remember to use RegExp conventions.** Example /\d/ would be '\\d'.

h3. digit

No Parameters - Value must contain only numbers

h3. email

No Parameters - Value must be a valid user@domain.tld 

h3. length

length[5] - Value would have to be exactly 5 chars
length[1,10] - Value would have to be between 1 and 10 chars

h3. numeric 

numeric[decChar] - Value must be a valid positive, negative or decimal number. By default the decimal is a '.'. Change the param if you require a different decimal such as ','.

h3. phone

phone[7,10,11] - Value must contain the given amount of numbers found in the parameter. By default
    just using **validate_phone** will return true for 7, 10 and 11 digit phone numbers. If you wanted to
    accept only 10 digit numbers simply use **validate_phone[10]**. 

h3. required

No Parameters - returns false on an empty() value

More built in rules to come.

You can add your own rules by creating a rules object and extending ProValidate.Validation:

<pre><code class="javascript">
myRules = {
	not: function(elem, param){
		var value = $F(elem);
		return value.empty() ? true : (value != param);
	}
};

Object.extend(ProValidate.Validation, myRules);
</code></pre>

To add your rule to an element:

<pre><code class="javascript">
	var provalidate = new ProValidate('myForm').add('state').rule('not[VA]', "You can't live in Virginia, you are not a lover.");
</code></pre>

h2. Methods

For most methods **element** refers to either the **id** of an element or the **name** of the element. All methods are chainable except validate which returns boolean. 

|_. Method |_. Use |_. Description |
| add | provalidate.add(element) | Sets an element up for rules to be added with .rule() |
| addRule | provalidate.addRule(element, rule, message) | Adds a rule to the form element. |
| addRules | provalidate.addRules(element, {rule: message, rule2: message}) | Adds multiple rules to an element. |
| clearInvalid | protovalidate.clearInvalid(element) | Clears errors from an element. If no element is given, clears all errors |
| removeRule | provalidate.removeRule(element, rule) | Removes the given rule from an element. |
| rule | provalidate.rule(rule, message) | Adds a rule to an element prepared with .add() |
| storedRules | provaidate.storedRules(element) | Pulls the rules that have been stored in an element with Element#store |
| trigger | provalidate.trigger(element, rule, message) | Triggers an error. Message is optional. Rule is optional if you provide a message. |
| validate | provalidate.validate(element, rule) | Returns bool. Rule can be a string to check a single rule, an object of {rules: messages} to check multiple, or nothing to check all rules currently assigned to the element. |
